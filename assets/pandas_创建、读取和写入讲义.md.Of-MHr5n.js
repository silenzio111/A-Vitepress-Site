import{_ as t,c as a,o as s,a2 as i}from"./chunks/framework.BozWisU7.js";const E=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"pandas/创建、读取和写入讲义.md","filePath":"pandas/创建、读取和写入讲义.md"}'),e={name:"pandas/创建、读取和写入讲义.md"},d=i(`<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>In this micro-course, you&#39;ll learn all about <strong><a href="https://pandas.pydata.org" target="_blank" rel="noreferrer">pandas</a></strong>, the most popular Python library for data analysis.</p><p>Along the way, you&#39;ll complete several hands-on exercises with real-world data. We recommend that you work on the exercises while reading the corresponding tutorials.</p><p>In this tutorial, you will learn how to create your own data, along with how to work with data that already exists.</p><h1 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h1><p>To use pandas, you&#39;ll typically start with the following line of code.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pandas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd</span></span></code></pre></div><h1 id="creating-data" tabindex="-1">Creating data <a class="header-anchor" href="#creating-data" aria-label="Permalink to &quot;Creating data&quot;">​</a></h1><p>There are two core objects in pandas: the <strong>DataFrame</strong> and the <strong>Series</strong>.</p><h3 id="dataframe" tabindex="-1">DataFrame <a class="header-anchor" href="#dataframe" aria-label="Permalink to &quot;DataFrame&quot;">​</a></h3><p>A DataFrame is a table. It contains an array of individual <em>entries</em>, each of which has a certain <em>value</em>. Each entry corresponds to a row (or <em>record</em>) and a <em>column</em>.</p><p>For example, consider the following simple DataFrame:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.DataFrame({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Yes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;No&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">131</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]})</span></span></code></pre></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>Yes</th><th>No</th></tr></thead><tbody><tr><th>0</th><td>50</td><td>131</td></tr><tr><th>1</th><td>21</td><td>2</td></tr></tbody></table></div><p>In this example, the &quot;0, No&quot; entry has the value of 131. The &quot;0, Yes&quot; entry has a value of 50, and so on.</p><p>DataFrame entries are not limited to integers. For instance, here&#39;s a DataFrame whose values are strings:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.DataFrame({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;I liked it.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;It was awful.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Sue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pretty good.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bland.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]})</span></span></code></pre></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>Bob</th><th>Sue</th></tr></thead><tbody><tr><th>0</th><td>I liked it.</td><td>Pretty good.</td></tr><tr><th>1</th><td>It was awful.</td><td>Bland.</td></tr></tbody></table></div><p>We are using the <code>pd.DataFrame()</code> constructor to generate these DataFrame objects. The syntax for declaring a new one is a dictionary whose keys are the column names (<code>Bob</code> and <code>Sue</code> in this example), and whose values are a list of entries. This is the standard way of constructing a new DataFrame, and the one you are most likely to encounter.</p><p>The dictionary-list constructor assigns values to the <em>column labels</em>, but just uses an ascending count from 0 (0, 1, 2, 3, ...) for the <em>row labels</em>. Sometimes this is OK, but oftentimes we will want to assign these labels ourselves.</p><p>The list of row labels used in a DataFrame is known as an <strong>Index</strong>. We can assign values to it by using an <code>index</code> parameter in our constructor:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.DataFrame({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;I liked it.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;It was awful.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &#39;Sue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pretty good.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bland.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]},</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">             index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Product A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Product B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>Bob</th><th>Sue</th></tr></thead><tbody><tr><th>Product A</th><td>I liked it.</td><td>Pretty good.</td></tr><tr><th>Product B</th><td>It was awful.</td><td>Bland.</td></tr></tbody></table></div><h3 id="series" tabindex="-1">Series <a class="header-anchor" href="#series" aria-label="Permalink to &quot;Series&quot;">​</a></h3><p>A Series, by contrast, is a sequence of data values. If a DataFrame is a table, a Series is a list. And in fact you can create one with nothing more than a list:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.Series([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><pre><code>0    1
1    2
2    3
3    4
4    5
dtype: int64
</code></pre><p>A Series is, in essence, a single column of a DataFrame. So you can assign row labels to the Series the same way as before, using an <code>index</code> parameter. However, a Series does not have a column name, it only has one overall <code>name</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pd.Series([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2015 Sales&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2016 Sales&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2017 Sales&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Product A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><pre><code>2015 Sales    30
2016 Sales    35
2017 Sales    40
Name: Product A, dtype: int64
</code></pre><p>The Series and the DataFrame are intimately related. It&#39;s helpful to think of a DataFrame as actually being just a bunch of Series &quot;glued together&quot;. We&#39;ll see more of this in the next section of this tutorial.</p><h1 id="reading-data-files" tabindex="-1">Reading data files <a class="header-anchor" href="#reading-data-files" aria-label="Permalink to &quot;Reading data files&quot;">​</a></h1><p>Being able to create a DataFrame or Series by hand is handy. But, most of the time, we won&#39;t actually be creating our own data by hand. Instead, we&#39;ll be working with data that already exists.</p><p>Data can be stored in any of a number of different forms and formats. By far the most basic of these is the humble CSV file. When you open a CSV file you get something that looks like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Product A,Product B,Product C,</span></span>
<span class="line"><span>30,21,9,</span></span>
<span class="line"><span>35,34,1,</span></span>
<span class="line"><span>41,11,11</span></span></code></pre></div><p>So a CSV file is a table of values separated by commas. Hence the name: &quot;Comma-Separated Values&quot;, or CSV.</p><p>Let&#39;s now set aside our toy datasets and see what a real dataset looks like when we read it into a DataFrame. We&#39;ll use the <code>pd.read_csv()</code> function to read the data into a DataFrame. This goes thusly:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wine_reviews </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.read_csv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../input/wine-reviews/winemag-data-130k-v2.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>We can use the <code>shape</code> attribute to check how large the resulting DataFrame is:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wine_reviews.shape</span></span></code></pre></div><pre><code>(129971, 14)
</code></pre><p>So our new DataFrame has 130,000 records split across 14 different columns. That&#39;s almost 2 million entries!</p><p>We can examine the contents of the resultant DataFrame using the <code>head()</code> command, which grabs the first five rows:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wine_reviews.head()</span></span></code></pre></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>Unnamed: 0</th><th>country</th><th>description</th><th>designation</th><th>points</th><th>price</th><th>province</th><th>region_1</th><th>region_2</th><th>taster_name</th><th>taster_twitter_handle</th><th>title</th><th>variety</th><th>winery</th></tr></thead><tbody><tr><th>0</th><td>0</td><td>Italy</td><td>Aromas include tropical fruit, broom, brimston...</td><td>Vulkà Bianco</td><td>87</td><td>NaN</td><td>Sicily &amp; Sardinia</td><td>Etna</td><td>NaN</td><td>Kerin O’Keefe</td><td>@kerinokeefe</td><td>Nicosia 2013 Vulkà Bianco (Etna)</td><td>White Blend</td><td>Nicosia</td></tr><tr><th>1</th><td>1</td><td>Portugal</td><td>This is ripe and fruity, a wine that is smooth...</td><td>Avidagos</td><td>87</td><td>15.0</td><td>Douro</td><td>NaN</td><td>NaN</td><td>Roger Voss</td><td>@vossroger</td><td>Quinta dos Avidagos 2011 Avidagos Red (Douro)</td><td>Portuguese Red</td><td>Quinta dos Avidagos</td></tr><tr><th>2</th><td>2</td><td>US</td><td>Tart and snappy, the flavors of lime flesh and...</td><td>NaN</td><td>87</td><td>14.0</td><td>Oregon</td><td>Willamette Valley</td><td>Willamette Valley</td><td>Paul Gregutt</td><td>@paulgwine</td><td>Rainstorm 2013 Pinot Gris (Willamette Valley)</td><td>Pinot Gris</td><td>Rainstorm</td></tr><tr><th>3</th><td>3</td><td>US</td><td>Pineapple rind, lemon pith and orange blossom ...</td><td>Reserve Late Harvest</td><td>87</td><td>13.0</td><td>Michigan</td><td>Lake Michigan Shore</td><td>NaN</td><td>Alexander Peartree</td><td>NaN</td><td>St. Julian 2013 Reserve Late Harvest Riesling ...</td><td>Riesling</td><td>St. Julian</td></tr><tr><th>4</th><td>4</td><td>US</td><td>Much like the regular bottling from 2012, this...</td><td>Vintner&#39;s Reserve Wild Child Block</td><td>87</td><td>65.0</td><td>Oregon</td><td>Willamette Valley</td><td>Willamette Valley</td><td>Paul Gregutt</td><td>@paulgwine</td><td>Sweet Cheeks 2012 Vintner&#39;s Reserve Wild Child...</td><td>Pinot Noir</td><td>Sweet Cheeks</td></tr></tbody></table></div><p>The <code>pd.read_csv()</code> function is well-endowed, with over 30 optional parameters you can specify. For example, you can see in this dataset that the CSV file has a built-in index, which pandas did not pick up on automatically. To make pandas use that column for the index (instead of creating a new one from scratch), we can specify an <code>index_col</code>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wine_reviews </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pd.read_csv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../input/wine-reviews/winemag-data-130k-v2.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index_col</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wine_reviews.head()</span></span></code></pre></div><div><table border="1" class="dataframe"><thead><tr style="text-align:right;"><th></th><th>country</th><th>description</th><th>designation</th><th>points</th><th>price</th><th>province</th><th>region_1</th><th>region_2</th><th>taster_name</th><th>taster_twitter_handle</th><th>title</th><th>variety</th><th>winery</th></tr></thead><tbody><tr><th>0</th><td>Italy</td><td>Aromas include tropical fruit, broom, brimston...</td><td>Vulkà Bianco</td><td>87</td><td>NaN</td><td>Sicily &amp; Sardinia</td><td>Etna</td><td>NaN</td><td>Kerin O’Keefe</td><td>@kerinokeefe</td><td>Nicosia 2013 Vulkà Bianco (Etna)</td><td>White Blend</td><td>Nicosia</td></tr><tr><th>1</th><td>Portugal</td><td>This is ripe and fruity, a wine that is smooth...</td><td>Avidagos</td><td>87</td><td>15.0</td><td>Douro</td><td>NaN</td><td>NaN</td><td>Roger Voss</td><td>@vossroger</td><td>Quinta dos Avidagos 2011 Avidagos Red (Douro)</td><td>Portuguese Red</td><td>Quinta dos Avidagos</td></tr><tr><th>2</th><td>US</td><td>Tart and snappy, the flavors of lime flesh and...</td><td>NaN</td><td>87</td><td>14.0</td><td>Oregon</td><td>Willamette Valley</td><td>Willamette Valley</td><td>Paul Gregutt</td><td>@paulgwine</td><td>Rainstorm 2013 Pinot Gris (Willamette Valley)</td><td>Pinot Gris</td><td>Rainstorm</td></tr><tr><th>3</th><td>US</td><td>Pineapple rind, lemon pith and orange blossom ...</td><td>Reserve Late Harvest</td><td>87</td><td>13.0</td><td>Michigan</td><td>Lake Michigan Shore</td><td>NaN</td><td>Alexander Peartree</td><td>NaN</td><td>St. Julian 2013 Reserve Late Harvest Riesling ...</td><td>Riesling</td><td>St. Julian</td></tr><tr><th>4</th><td>US</td><td>Much like the regular bottling from 2012, this...</td><td>Vintner&#39;s Reserve Wild Child Block</td><td>87</td><td>65.0</td><td>Oregon</td><td>Willamette Valley</td><td>Willamette Valley</td><td>Paul Gregutt</td><td>@paulgwine</td><td>Sweet Cheeks 2012 Vintner&#39;s Reserve Wild Child...</td><td>Pinot Noir</td><td>Sweet Cheeks</td></tr></tbody></table></div>`,48),n=[d];function h(l,r,o,p,k,c){return s(),a("div",null,n)}const u=t(e,[["render",h]]);export{E as __pageData,u as default};
